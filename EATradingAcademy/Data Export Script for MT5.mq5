//+----------------------------------------------------------------------------------+
//| Data Export                                                                      |
//| Copyright 2024, Forex Software Ltd.                                              |
//| https://forexsb.com                                                              |
//|                                                                                  |
//| Use this script in MT5 to export historical files for Expert Advisor Studio and  |
//| Forex Strategy Builder Professional.                                             |
//| The files are saved in the MT5's \MQL5\Files folder with .json extension.        |
//| Drag and drop the files in the Tools -> Data Import drop box.                    |
//+----------------------------------------------------------------------------------+

#property copyright   "Forex Software Ltd."
#property link        "https://forexsb.com"
#property description "Export historical data in JSON format for EA Studio and FSB Pro."
#property version     "6.1"
#property strict
#property script_show_inputs

static input int      Maximum_Bars = 100000;        // Maximum count of bars
static input int      Spread       = 0;             // Spread in points (0 for average)
static input double   Commission   = 0;             // Commission per lot, open + close
static input double   PointValue   = 1;             // Profit generated by one lot per point
static input datetime FromDate     = D'2007.01.01'; // Data start limitation

// Commission in currency per lot. It is normally used by the ECN brokers.
// Example: 10 - it means 5 USD for the entry and 5 USD for the exit per round lot.

const ENUM_TIMEFRAMES periods[] = {PERIOD_M1, PERIOD_M5, PERIOD_M15, PERIOD_M30, PERIOD_H1, PERIOD_H4, PERIOD_D1};
string comment = "";

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void OnStart(void)
  {
   for(int p = 0; p < ArraySize(periods); p += 1)
     {
      const string fileName = GetSymbolName(_Symbol) + PeriodToStr(periods[p]) + ".json";
      const string data     = GetSymbolData(_Symbol, periods[p]);

      SaveFile(fileName, data);
     }
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
string GetSymbolData(string symbol, ENUM_TIMEFRAMES period)
  {
   MqlTick tick;
   SymbolInfoTick(symbol, tick);

   MqlRates rates[];
   ArraySetAsSeries(rates, true);

   const string symbolName = GetSymbolName(symbol);
   const int    digits     = (int) SymbolInfoInteger(symbol, SYMBOL_DIGITS);
   const int    maxBars    = MathMin(TerminalInfoInteger(TERMINAL_MAXBARS), Maximum_Bars);
   const string server     = AccountInfoString(ACCOUNT_SERVER)  == "" ? "Unknown"    : AccountInfoString(ACCOUNT_SERVER);
   const string company    = AccountInfoString(ACCOUNT_COMPANY) == "" ? "Unknown"    : AccountInfoString(ACCOUNT_COMPANY);
   const string terminal   = TerminalInfoString(TERMINAL_NAME)  == "" ? "MetaTrader" : TerminalInfoString(TERMINAL_NAME);
   const string symbolHint = SymbolInfoString(symbol, SYMBOL_DESCRIPTION);
   const int    bars       = CopyRates(symbol, period, 0, maxBars, rates);

   if(bars < 300)
     {
      comment += symbol + " " + PeriodToText(period) + ", " + IntegerToString(bars) + " bars - Not enough data!\n";
      Comment(comment);
      return "";
     }

   string time    = "";
   string open    = "";
   string high    = "";
   string low     = "";
   string close   = "";
   string volume  = "";
   string spreads = "";

   const datetime millennium = D'2000.01.01 00:00';
   ulong sumSpread = 0;

   for(int i = bars - 1; i >= 0; i -= 1)
     {
      if(rates[i].time < FromDate)
         continue;

      const string comma = i > 0 ? "," : "";
      sumSpread += rates[i].spread;

      StringAdd(time,    IntegerToString((rates[i].time - millennium) / 60) + comma);
      StringAdd(open,    DoubleToString(rates[i].open,  digits) + comma);
      StringAdd(high,    DoubleToString(rates[i].high,  digits) + comma);
      StringAdd(low,     DoubleToString(rates[i].low,   digits) + comma);
      StringAdd(close,   DoubleToString(rates[i].close, digits) + comma);
      StringAdd(volume,  IntegerToString(rates[i].tick_volume)  + comma);
      StringAdd(spreads, IntegerToString(rates[i].spread)       + comma);
     }

   const int avrgSpread  = (int) MathCeil(((double) sumSpread) / ((double) bars));
   const int realSpread  = sumSpread > 0 ? RoundNumber(avrgSpread) : GetCurrentSpread();
   const int fixedSpread = Spread > 0 ? Spread : realSpread;

   const string symbolData = "{" +
                             "\"ver\":"            + "3"                                                                         +   "," +
                             "\"terminal\":\""     + terminal                                                                    + "\"," +
                             "\"company\":\""      + company                                                                     + "\"," +
                             "\"server\":\""       + server                                                                      + "\"," +
                             "\"symbol\":\""       + symbolName                                                                  + "\"," +
                             "\"description\":\""  + symbolHint                                                                  + "\"," +
                             "\"period\":"         + PeriodToStr(period)                                                         +   "," +
                             "\"baseCurrency\":\"" + SymbolInfoString(_Symbol, SYMBOL_CURRENCY_BASE)                             + "\"," +
                             "\"priceIn\":\""      + SymbolInfoString(_Symbol, SYMBOL_CURRENCY_PROFIT)                           + "\"," +
                             "\"lotSize\":"        + IntegerToString((int) SymbolInfoDouble(symbol, SYMBOL_TRADE_CONTRACT_SIZE)) +  "," +
                             "\"stopLevel\":"      + IntegerToString((int) SymbolInfoInteger(symbol, SYMBOL_TRADE_STOPS_LEVEL))  +  "," +
                             "\"tickValue\":"      + DoubleToString(SymbolInfoDouble(symbol, SYMBOL_TRADE_TICK_VALUE), digits)   +  "," +
                             "\"minLot\":"         + DoubleToString(SymbolInfoDouble(symbol, SYMBOL_VOLUME_MIN), 2)              +  "," +
                             "\"maxLot\":"         + DoubleToString(SymbolInfoDouble(symbol, SYMBOL_VOLUME_MAX), 2)              +  "," +
                             "\"lotStep\":"        + DoubleToString(SymbolInfoDouble(symbol, SYMBOL_VOLUME_STEP), 2)             +  "," +
                             "\"serverTime\":"     + IntegerToString((TimeCurrent() - millennium) / 60)                          +  "," +
                             "\"swapLong\":"       + DoubleToString(SymbolInfoDouble(symbol, SYMBOL_SWAP_LONG), 5)               +  "," +
                             "\"swapShort\":"      + DoubleToString(SymbolInfoDouble(symbol, SYMBOL_SWAP_SHORT), 5)              +  "," +
                             "\"swapMode\":"       + IntegerToString(SymbolInfoInteger(_Symbol, SYMBOL_SWAP_MODE))               +  "," +
                             "\"swapThreeDays\":"  + IntegerToString(SymbolInfoInteger(_Symbol, SYMBOL_SWAP_ROLLOVER3DAYS))      +  "," +
                             "\"spread\":"         + IntegerToString(fixedSpread)                                                +  "," +
                             "\"digits\":"         + IntegerToString(digits)                                                     +  "," +
                             "\"bars\":"           + IntegerToString(bars)                                                       +  "," +
                             "\"commission\":"     + DoubleToString(Commission, 5)                                               +  "," +
                             "\"pointValue\":"     + DoubleToString(PointValue, 5)                                               +  "," +
                             "\"bid\":"            + DoubleToString(tick.bid, digits)                                            +  "," +
                             "\"ask\":"            + DoubleToString(tick.ask, digits)                                            +  "," +
                             "\"time\":["          + time                                                                        + "]," +
                             "\"open\":["          + open                                                                        + "]," +
                             "\"high\":["          + high                                                                        + "]," +
                             "\"low\":["           + low                                                                         + "]," +
                             "\"close\":["         + close                                                                       + "]," +
                             "\"volume\":["        + volume                                                                      + "]," +
                             "\"spreads\":["       + spreads                                                                     + "]"  +
                             "}";

   comment += symbol + " " + PeriodToText(period) + " bars: " + IntegerToString(bars) + ", spread: " +
              IntegerToString(fixedSpread) + " (avrg " + IntegerToString(avrgSpread) + ")\n";

   Comment(comment);

   return symbolData;
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void SaveFile(const string fileName, const string data)
  {
   ResetLastError();

   const int encoding   = GetFileEncoding();
   const int fileHandle = FileOpen(fileName, FILE_WRITE|FILE_TXT|encoding);

   if(fileHandle == INVALID_HANDLE)
      return;

   FileWrite(fileHandle, data);
   FileClose(fileHandle);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
string GetSymbolName(const string symbol)
  {
   const string badCharsText = "~ ` ! @ # $ % ^ & * ( ) - _ + = , . / ' \" [ ] { } \\ | ";
   string badChars[];
   StringSplit(badCharsText, ' ', badChars);

   string newSymbol = symbol;

   for(int i = 0; i < ArraySize(badChars); i += 1)
     {
      StringReplace(newSymbol, badChars[i], "");
     }

   return newSymbol;
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
string PeriodToStr(const ENUM_TIMEFRAMES period)
  {
   return IntegerToString(PeriodSeconds(period) / 60);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
string PeriodToText(const ENUM_TIMEFRAMES period)
  {
   const int periodMinutes = PeriodSeconds(period) / 60;

   switch(periodMinutes)
     {
      case    1: return "M1" ;
      case    5: return "M5" ;
      case   15: return "M15";
      case   30: return "M30";
      case   60: return "H1" ;
      case  240: return "H4" ;
      case 1440: return "D1" ;
      default  : return ""   ;
     }
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
int GetCurrentSpread(void)
  {
   MqlTick tick;
   SymbolInfoTick(_Symbol, tick);

   MqlRates rates[];
   ArraySetAsSeries(rates, true);

   const int    digits = (int) SymbolInfoInteger(_Symbol, SYMBOL_DIGITS);
   const double spread = (tick.ask - tick.bid) * MathPow(10, digits);

   return RoundNumber(spread);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
int RoundNumber(const double number)
  {
   const int figures    = number < 1000 ? 2 : 3;
   const int multiplier = (int) MathPow(10, figures - 1);

   return (int)(MathCeil(number / multiplier) * multiplier);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
int GetFileEncoding(void)
  {
   return IsAscii(_Symbol) &&
          IsAscii(SymbolInfoString(_Symbol, SYMBOL_DESCRIPTION)) &&
          IsAscii(AccountInfoString(ACCOUNT_SERVER))  &&
          IsAscii(AccountInfoString(ACCOUNT_COMPANY)) &&
          IsAscii(TerminalInfoString(TERMINAL_NAME))
          ? FILE_ANSI
          : FILE_UNICODE;
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
bool IsAscii(const string text)
  {
   for(int i = 0; i < StringLen(text); i += 1)
     {
      const int charCode = StringGetCharacter(text, i);
      if(charCode < 32 || charCode > 126)
         return false;
     }

   return true;
  }
//+------------------------------------------------------------------+
